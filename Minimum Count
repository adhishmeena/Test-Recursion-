Minimum Count
Send Feedback
Given an integer N, find and return the count of minimum numbers, sum of whose squares is equal to N.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
Note : x^y represents x raise to the power y.
Input Format :
Integer N
Output Format :
Required minimum count
Constraints :
1 <= N <= 50
Sample Input 1 :
12
Sample Output 1 :
3
Sample Output 1 Explanation :
12 can be represented as :
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 2^2
1^1 + 1^1 + 1^1 + 1^1 + 2^2 + 2^2
2^2 + 2^2 + 2^2
As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1



//Main Code

// solving this question via top down approach 
public class Solution {
	static int min_path_len=Integer.MAX_VALUE;
    public static void pathlength(int n, int min_path_length)
    {
        if(n==0)
        {
            if(min_path_len>min_path_length)
            {
                min_path_len=min_path_length;
            }
        // System.out.print(min_path_length);
       return;
        }
        
        for(int i=1; n-i*i>=0;i++)
        {     
               pathlength(n-i*i, min_path_length+1); 
        }
        
        
        
    
        
        
    }
    
    
	public static int minCount(int n){
		/* Your class should be named Solution
	 	 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
		 * Taking input and printing output is handled automatically.
		*/
		// if(n==0)
		// {
		// System.out.print(min_path_length);
		// }
        
         pathlength(n, 0); 
      //  System.out.print(min_path_len);
        return min_path_len;
	}
}


